echo starting unit tests for Olivine interpreter
echo version: !version
print ------\n

IF !(eval 4 + 6 * ( 3 - 1 ) = 16)
    echo [ OK ] if and eval
END; ELSE
    echo [ FAILED ] if and eval
END


set var 43
IF !(eval !var = 43)
    echo [ OK ] variable
END; ELSE
    echo [ FAILED ] variable
END
del var


set sum 0
FOR i !(range 1 11)
    set sum !(eval !sum + !i)
END

IF !(eval !sum = 55)
    echo [ OK ] for loop
END; ELSE
    echo [ FAILED ] for loop
END

del sum


set i 0
WHILE !(eval !i < 101)
    set i !(eval !i + 1)
END

IF !(eval !i = 101)
    echo [ OK ] while loop
END; ELSE
    echo [ FAILED ] while
END

set i 0
WHILE 1
    set i !(eval !i + 1)
    IF !(eval !i = 101)
        BREAK
    END
END

IF !(eval !i = 101)
    echo [ OK ] while break
END; ELSE
    echo [ FAILED ] while break
END

set i 0
set sum 0

WHILE !(eval !i ~ 101)
    set i !(eval !i + 1)
    IF !(eval !i ^ 2)
        CONTINUE
    END
    set sum !(eval !sum + !i)
END

IF !(eval !sum = 2550);
    echo [ OK ] while continue
END; ELSE
    echo [ FAILED ] while continue
END

del sum
del i

FOR e 1 2 3 4 5 6 7 8 9 10
    set last !e
    IF !(eval !e = 7)
        BREAK
    END
END

IF !(eval !last = 7)
    echo [ OK ] for break
END; ELSE
    echo [ FAILED ] for break
END

del last

set sum 0
FOR e 1 2 3 4 5 6 7 8 9 10
    IF !(eval !e ^ 2)
        CONTINUE
    END
    set sum !(eval !sum + !e)
END

IF !(eval !sum = 30)
    echo [ OK ] for continue
END; ELSE
    echo [ FAILED ] for continue
END

del sum

FUNC testargc
    RETURN !#
END

IF !(eval !(testargc 1 2 3 4 5) = 5)
    echo [ OK ] function argc
END; ELSE
    echo [ FAILED ] function argc
END

FUNC testargv
    IF !#
        RETURN !(eval !0 * 2)
    END; ELSE
        RETURN 0
    END;
END

IF !(eval !(testargv 5) = 10)
    echo [ OK ] function argv
END; ELSE
    echo [ FAILED ] function argv
END

del -f testargc
del -f testargv

FUNC testglobal
    global var 1
    set v2 1
    set var 2
END

global var 0
global v2  0

testglobal

IF !(eval !var = 1)
    echo [ OK ] global variable
END; ELSE
    echo [ FAILED ] global variable
END

IF !(eval !v2 = 0)
    echo [ OK ] local overload
END; ELSE
    echo [ FAILED ] local overload
END

del -g var
del -g v2
del -f testglobal

global l0 66

FUNC testlocalsub
    set tmp 13
END

FUNC testlocal
    IF !(eval !l0 = 66)
        set tmp 12
        testlocalsub
        IF !(eval !tmp = 12)
            RETURN 1
        END
    END

    RETURN 0
END

IF !(testlocal)
    echo [ OK ] local variable
END; ELSE
    echo [ FAILED ] local variable
END

del -g l0
del -f testlocalsub
del -f testlocal

FUNC deepeval
    IF !(eval 43 ~ 43)
        echo [ FAILED ] eval (simple equality)
        RETURN
    END; IF !(eval 42 + 1 ~ 43)
        echo [ FAILED ] eval (addition, equality)
        RETURN
    END; IF !(eval 1 + 32 * 2 ~ 65)
        echo [ FAILED ] eval (simple priority)
        RETURN
    END; IF !(eval 1 + ( 31 + 1 ) * 2 ~ 66 - 1)
        echo [ FAILED ] eval (complex priority)
        RETURN
    END; IF !(eval 30 ^ 8 ~ 36 / 6)
        echo [ FAILED ] eval (division, modulo)
        RETURN
    END; IF !(eval "ab" + 2 ~ "ab2")
        echo [ FAILED ] eval (str + int)
        RETURN
    END; IF !(eval 2 + "ab" ~ "2ab")
        echo [ FAILED ] eval (int + str)
        RETURN
    END; IF !(eval "ab" + "cd" ~ "abcd")
        echo [ FAILED ] eval (str + str)
        RETURN
    END; IF !(eval "ab" . "cd" ~ "abcd")
        echo [ FAILED ] eval (str . str)
        RETURN
    END; IF !(eval 4 . 0 ~ 40)
        echo [ FAILED ] eval (int . int)
        RETURN
    END; IF !(eval 0x42 ~ 66)
        echo [ FAILED ] eval (hex)
        RETURN
    END; IF !(eval 0b101010 ~ 42)
        echo [ FAILED ] eval (bin)
        RETURN
    END; IF !(eval "coucou" @ 2 ~ "u")
        echo [ FAILED ] eval (char at index)
        RETURN
    END;

    echo [ OK ] all eval tests
END

deepeval

del -f deepeval

FUNC temp
    echo test
    RETURN 42
END

FUNC pp_tester
    IF !(eval "!(print coucou |)" ~ "coucou")
        echo [ FAILED ] pipe (print)
        RETURN
    END; IF !(eval "!(echo coucou |)" ~ "coucou")
        echo [ FAILED ] pipe (echo)
        RETURN
    END; IF !(eval !(print 'abc def yes' | wc -w |) ~ 3)
        echo [ FAILED ] pipe (print + wc)
        RETURN
    END; IF !(eval "!(temp | temp |)" ~ "test")
        echo [ FAILED ] pipe (function)
        RETURN
    END

    echo [ OK ] pipe tests
END

pp_tester

del -f pp_tester
del -f temp

print ------\n

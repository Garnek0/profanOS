IF !(eval 4 + 6 * (3 - 1) = 16)
    echo if and eval passed
END; ELSE
    echo if and eval failed
END


set var 43
IF !(eval !var = 43)
    echo variable passed
END; ELSE
    echo variable failed
END
del var


set sum 0
FOR i !(range 1 11)
    set sum !(eval !sum + !i)
END

IF !(eval !sum = 55)
    echo for passed
END; ELSE
    echo for failed
END

del sum


set i 0
WHILE !(eval !i < 101)
    set i !(eval !i + 1)
END

IF !(eval !i = 101)
    echo while passed
END; ELSE
    echo while failed
END

set i 0
WHILE 1
    set i !(eval !i + 1)
    IF !(eval !i = 101)
        BREAK
    END
END

IF !(eval !i = 101)
    echo while break passed
END; ELSE
    echo while break failed
END

set i 0
set sum 0

WHILE !(eval !i ~ 101)
    set i !(eval !i + 1)
    IF !(eval !i ^ 2)
        CONTINUE
    END
    set sum !(eval !sum + !i)
END

IF !(eval !sum = 2550);
    echo while continue passed
END; ELSE
    echo while continue failed
END

del sum
del i

FOR e 1 2 3 4 5 6 7 8 9 10
    set last !e
    IF !(eval !e = 7)
        BREAK
    END
END

IF !(eval !last = 7)
    echo for break passed
END; ELSE
    echo for break failed
END

del last

set sum 0
FOR e 1 2 3 4 5 6 7 8 9 10
    IF !(eval !e ^ 2)
        CONTINUE
    END
    set sum !(eval !sum + !e)
END

IF !(eval !sum = 30)
    echo for continue passed
END; ELSE
    echo for continue failed
END

del sum

FUNC testargc
    RETURN !#
END

IF !(eval !(testargc 1 2 3 4 5) = 5)
    echo function argc passed
END; ELSE
    echo function argc failed
END

FUNC testargv
    IF !#
        RETURN !(eval !0 * 2)
    END; ELSE
        RETURN 0
    END;
END

IF !(eval !(testargv 5) = 10)
    echo function argv passed
END; ELSE
    echo function argv failed
END

del -f testargc
del -f testargv

FUNC testglobal
    global var 42
    set var 43
END

testglobal

IF !(eval !var = 43)
    echo global variable passed
END; ELSE
    echo global variable failed
END

del var
del -f testglobal

set l0 66

FUNC testlocalsub
    set tmp 13
END

FUNC testlocal
    IF !(eval !l0 = 66)
        set tmp 12
        testlocalsub
        IF !(eval !tmp = 12)
            RETURN 1
        END
    END

    RETURN 0
END

IF !(testlocal)
    echo local variable passed
END; ELSE
    echo local variable failed
END

del l0
del -f testlocalsub
del -f testlocal

FUNC deepeval
    IF !(eval 43 ~ 43)
        echo eval failed (simple equality)
        RETURN
    END; IF !(eval 42 + 1 ~ 43)
        echo eval failed (addition, equality)
        RETURN
    END; IF !(eval 1+32*2 ~ 65)
        echo eval failed (simple priority)
        RETURN
    END; IF !(eval 1 + (31 + 1) * 2 ~ 66 - 1)
        echo eval failed (complex priority)
        RETURN
    END; IF !(eval 30 ^ 8 ~ 36 / 6)
        echo eval failed (division, modulo)
        RETURN
    END; IF !(eval ab + 2 ~ ab2)
        echo eval failed (str + int)
        RETURN
    END; IF !(eval 2 + ab ~ 2ab)
        echo eval failed (int + str)
        RETURN
    END; IF !(eval ab + cd ~ abcd)
        echo eval failed (str + str)
        RETURN
    END; IF !(eval ab . cd ~ abcd)
        echo eval failed (str . str)
        RETURN
    END; IF !(eval 4 . 0 ~ 40)
        echo eval failed (int . int)
        RETURN
    END; IF !(eval 0x42 ~ 66)
        echo eval failed (hex)
        RETURN
    END; IF !(eval 0b101010 ~ 42)
        echo eval failed (bin)
        RETURN
    END; IF !(eval coucou @ 2 ~ u)
        echo eval failed (char at index)
        RETURN
    END;

    echo all eval tests passed
END

deepeval

del -f deepeval

FUNC temp
    echo test
    RETURN 42
END

FUNC pp_tester
    IF !(eval !(print coucou |) ~ coucou)
        echo pipe failed (print)
        RETURN
    END; IF !(eval !(echo coucou |) ~ coucou)
        echo pipe failed (echo)
        RETURN
    END; IF !(eval !(print 'abc def yes' | wc -w |) ~ 3)
        echo pipe failed (print + wc)
        RETURN
    END; IF !(eval !(temp | temp |) ~ test)
        echo pipe failed (function)
        RETURN
    END

    echo pipe tests passed
END

pp_tester

del -f pp_tester
del -f temp

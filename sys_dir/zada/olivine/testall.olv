print 'starting unit tests for Olivine interpreter\n'
print 'version: !version\n'
print '------\n'

IF !(eval 4 + 6 * ( 3 - 1 ) = 16)
    print '[ OK ] if and eval\n'
END; ELSE
    print '[ FAILED ] if and eval\n'
END


set var 43
IF !(eval !var = 43)
    print '[ OK ] variable\n'
END; ELSE
    print '[ FAILED ] variable\n'
END
del var


set sum 0
FOR i !(range 1 11)
    set sum !(eval !sum + !i)
END

IF !(eval !sum = 55)
    print '[ OK ] for loop\n'
END; ELSE
    print '[ FAILED ] for loop\n'
END

del sum


set i 0
WHILE !(eval !i < 101)
    set i !(eval !i + 1)
END

IF !(eval !i = 101)
    print '[ OK ] while loop\n'
END; ELSE
    print '[ FAILED ] while\n'
END

set i 0
WHILE 1
    set i !(eval !i + 1)
    IF !(eval !i = 101)
        BREAK
    END
END

IF !(eval !i = 101)
    print '[ OK ] while break\n'
END; ELSE
    print '[ FAILED ] while break\n'
END

set i 0
set sum 0

WHILE !(eval !i ~ 101)
    set i !(eval !i + 1)
    IF !(eval !i % 2)
        CONTINUE
    END
    set sum !(eval !sum + !i)
END

IF !(eval !sum = 2550);
    print '[ OK ] while continue\n'
END; ELSE
    print '[ FAILED ] while continue\n'
END

del sum
del i

FOR e 1 2 3 4 5 6 7 8 9 10
    set last !e
    IF !(eval !e = 7)
        BREAK
    END
END

IF !(eval !last = 7)
    print '[ OK ] for break\n'
END; ELSE
    print '[ FAILED ] for break\n'
END

del last

set sum 0
FOR e 1 2 3 4 5 6 7 8 9 10
    IF !(eval !e % 2)
        CONTINUE
    END
    set sum !(eval !sum + !e)
END

IF !(eval !sum = 30)
    print '[ OK ] for continue\n'
END; ELSE
    print '[ FAILED ] for continue\n'
END

del sum

FUNC testargc
    RETURN !#
END

IF !(eval !(testargc 1 2 3 4 5) = 5)
    print '[ OK ] function argc\n'
END; ELSE
    print '[ FAILED ] function argc\n'
END

FUNC testargv
    IF !#
        RETURN !(eval !0 * 2)
    END; ELSE
        RETURN 0
    END;
END

IF !(eval !(testargv 5) = 10)
    print '[ OK ] function argv\n'
END; ELSE
    print '[ FAILED ] function argv\n'
END

del -f testargc
del -f testargv

FUNC testglobal
    global v1 1
    set v2 2
END

set v1 0
global v2 0

testglobal

IF !(eval !v1 = 1)
    print '[ OK ] local overload\n'
END; ELSE
    print '[ FAILED ] local overload\n'
END

IF !(eval !v2 = 2)
    print '[ OK ] global overload\n'
END; ELSE
    print '[ FAILED ] global overload\n'
END

del -f testglobal
del v1
del v2

FUNC testlocalsub
    set tmp 13
END

FUNC testlocal
    set tmp 12
    testlocalsub
    IF !(eval !tmp = 12)
        RETURN 1
    END

    RETURN 0
END

IF !(testlocal)
    print '[ OK ] local variable\n'
END; ELSE
    print '[ FAILED ] local variable\n'
END

del -f testlocalsub
del -f testlocal

FUNC deepeval
    IF !(eval 43 ~ 43)
        print '[ FAILED ] eval (simple equality)\n'
        RETURN
    END; IF !(eval 42 + 1 ~ 43)
        print '[ FAILED ] eval (addition, equality)\n'
        RETURN
    END; IF !(eval 1 + 32 * 2 ~ 65)
        print '[ FAILED ] eval (simple priority)\n'
        RETURN
    END; IF !(eval 1 + ( 31 + 1 ) * 2 ~ 66 - 1)
        print '[ FAILED ] eval (complex priority)\n'
        RETURN
    END; IF !(eval 30 % 8 ~ 36 / 6)
        print '[ FAILED ] eval (division, modulo)\n'
        RETURN
    END; IF !(eval "ab" + 2 ~ "ab2")
        print '[ FAILED ] eval (str + int)\n'
        RETURN
    END; IF !(eval 2 + "ab" ~ "2ab")
        print '[ FAILED ] eval (int + str)\n'
        RETURN
    END; IF !(eval "ab" + "cd" ~ "abcd")
        print '[ FAILED ] eval (str + str)\n'
        RETURN
    END; IF !(eval "ab" . "cd" ~ "abcd")
        print '[ FAILED ] eval (str . str)\n'
        RETURN
    END; IF !(eval 4 . 0 ~ 40)
        print '[ FAILED ] eval (int . int)\n'
        RETURN
    END; IF !(eval 0x42 ~ 66)
        print '[ FAILED ] eval (hex)\n'
        RETURN
    END; IF !(eval 0b101010 ~ 42)
        print '[ FAILED ] eval (bin)\n'
        RETURN
    END; IF !(eval "coucou" @ 2 ~ "u")
        print '[ FAILED ] eval (char at index)\n'
        RETURN
    END;

    print '[ OK ] all eval tests\n'
END

deepeval

del -f deepeval

FUNC temp
    print 'test\n'
    RETURN 42
END

FUNC pp_tester
    IF !(eval "!(print coucou |)" ~ "coucou")
        print '[ FAILED ] pipe (print)\n'
        RETURN
    END; IF !(eval "!(echo coucou |)" ~ "coucou")
        echo [ FAILED ] pipe (echo)
        RETURN
    END; IF !(eval !(print 'abc def yes' | wc -w |) ~ 3)
        print '[ FAILED ] pipe (print + wc)\n'
        RETURN
    END; IF !(eval "!(temp | temp |)" ~ "test")
        print '[ FAILED ] pipe (function)\n'
        RETURN
    END
    print '[ OK ] pipe tests\n'
END

pp_tester

del -f pp_tester
del -f temp

print '------\n'
